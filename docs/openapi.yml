openapi: '3.0.2'
info:
  title: Infominer API
  version: '0.1'
servers:
  - url: http://infominer.ijs.si/api/v1/
paths:

  # =============================================
  # DATASET ROUTES
  # =============================================

  /datasets:
    get:
      summary: "Get all datasets"
      description: "Gets all of the owner datasets."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasets:
                    description: "The array of datasets."
                    type: array
                    items:
                      $ref: "#/components/schemas/Dataset"
    post:
      summary: "Upload a dataset file"
      description:
        "Uploads a dataset file (.csv) with with the following structure: \n

        - **Header.** The first line contains the names of the data columns.\n

        - **Rows.** The reminder of the lines contain the row values. \n

        Both the header and row values are separated by a delimiter. **Supported delimiters:**
        comma, semicolon, pipe, and tilde.
        "
      requestBody:
        content:
          'multipart/form-data':
            schema:
              properties:
                file:
                  description: "The dataset file."
                  type: string
                  format: binary
              required:
              - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/FileMetadata"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /datasets/{datasetId}:
    post:
      summary: "Create a dataset"
      description: "Uploads the file metadata to create a new dataset."
      responses:
        '200':
          description: OK
    get:
      summary: "Get the dataset"
      responses:
        '200':
          description: OK
    put:
      summary: "Update the dataset"
      responses:
        '200':
          description: OK
    delete:
      summary: "Delete the dataset"
      responses:
        '200':
          description: OK

  /datasets/{datasetId}/status:
    get:
      summary: "Check the dataset upload status"
      responses:
        '200':
          description: OK

  # =============================================
  # METHOD ROUTES
  # =============================================

  /datasets/{datasetId}/methods:
    get:
      summary: "Get all methods"
      responses:
        '200':
          description: OK
    post:
      summary: "Execute a method"
      responses:
        '200':
          description: OK

  /datasets/{datasetId}/methods/{methodId}:
    get:
      summary: "Get the method"
      responses:
        '200':
          description: OK
    put:
      summary: "Update the method"
      responses:
        '200':
          description: OK
    delete:
      summary: "Delete the method"
      responses:
        '200':
          description: OK

  /datasets/{datasetId}/methods/{methodId}/status:
    get:
      summary: "Check the method creation status"
      responses:
        '200':
          description: OK

  # =============================================
  # SUBSET ROUTES
  # =============================================

  /datasets/{datasetId}/subsets:
    get:
      summary: "Get all subsets"
      responses:
        '200':
          description: OK
    post:
      summary: "Create a subset"
      responses:
        '200':
          description: OK

  /datasets/{datasetId}/subsets/{subsetId}:
    get:
      summary: "Get a subset"
      responses:
        '200':
          description: OK
    put:
      summary: "Update a subset"
      responses:
        '200':
          description: OK
    delete:
      summary: "Delete a subset"
      responses:
        '200':
          description: OK

  /datasets/{datasetId}/subsets/{subsetId}/download:
    get:
      summary: "Download a subset"
      responses:
        '200':
          description: OK

  # =============================================
  # DOCUMENT ROUTES
  # =============================================

  /datasets/{datasetId}/documents:
    get:
      summary: "Get some documents"
      responses:
        '200':
          description: OK

  /datasets/{datasetId}/documents/{documentId}:
    get:
      summary: "Get a document"
      responses:
        '200':
          description: OK
    put:
      summary: "Update a document"
      responses:
        '200':
          description: OK


# =============================================
# COMPONENTS
# =============================================

components:
  schemas:

    # =============================================
    # ERROR SCHEMAS
    # =============================================

    Error:
      type: object
      properties:
        message:
          type: string
          description: "The error message."
          default: "Bad Request"
        code:
          type: integer
          format: "int32"
          description: "The error status code."

    BadRequest:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            message:
              default: "Bad Request"
            code:
              default: 400

    UserNotAuhtorized:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            message:
              default: "User Not Authorized"
            code:
              default: 401

    RouteNotFound:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            message:
              default: "Route Not Found"
            code:
              default: 404

    ServerError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            message:
              default: "Server Side Error"
            code:
              default: 500

    # =============================================
    # UPLOAD SCHEMAS
    # =============================================

    FileMetadata:
      type: object
      properties:
        dataset:
          type: object
          description: "The file metadata."
          properties:
            id:
              type: integer
              description: "The dataset ID."
              minimum: 1
              example: 10
            filename:
              type: string
              description: "The uploaded file name."
              example: "secret-file.csv"
            delimiter:
              type: string
              description: "The identified delimiter."
              example: ";"
            fields:
              type: array
              description: "The identified fields in the file."
              items:
                $ref: "#/components/schemas/FileField"
            metadata:
              type: object
              description: "The metadata available for selection."
              properties:
                types:
                  type: array
                  description: "Possible field types."
                  items:
                    type: string
                    enum: ["number", "text", "class", "category", "datetime"]
                  example: ["number", "text", "class", "category", "datetime"]
                stopwords:
                  type: object
                  description: "The stopwords metadata."
                  properties:
                    languages:
                      type: array
                      description: "The array of all infominer supported stopwords."
                      items:
                        type: object
                        properties:
                          label:
                            type: string
                            description: "The full name of the language."
                          value:
                            type: string
                            description: "The language value."
                            minLength: 2
                            maxLength: 2
                      example: [
                        { label: "English", value: "en" },
                        { label: "German", value: "de" },
                        { label: "Slovene", value: "si" },
                        { label: "Spanish", value: "es" },
                        { label: "None", value: "none" },
                      ]

    FileField:
      type: object
      description: "The field metadata."
      properties:
        name:
          type: string
          description: "The field name."
          example: "label"
        type:
          type: string
          enum: ["number", "text", "class", "category", "datetime"]
          description: "The suggested field type."
          example: "class"
        included:
          type: boolean
          default: true


    # =============================================
    # DATASET SCHEMAS
    # =============================================

    Dataset:
      type: object
      properties:
        type:
          type: string
          description: "The dataset type."
          default: "dataset"
        id:
          type: integer
          description: "The dataset ID."
          minimum: 1
        name:
          type: string
          description: "The dataset name."
          example: "Secret Data"
        description:
          type: string
          nullable: true
          description: "The dataset description."
          example: "The dataset containing the secret information."
        nDocuments:
          type: integer
          description: "The number of documents in the dataset."
          example: 42000
        created:
          type: string
          format: datetime
          description: "The dataset creation date."
          example: "2021-01-19"
        status:
          type: string
          enum: ["IN_QUEUE", "LOADING", "FINISHED"]
          description: "The status of the dataset creation."
          example: "FINISHED"
        group:
          type: string
          description: "In which group the dataset belongs to."
          nullable: true
          example: null
        order:
          type: integer
          description: "The order of the dataset in the group."
          nullable: true
          example: null

    # =============================================
    # SUBSET SCHEMAS
    # =============================================



    # =============================================
    # METHOD SCHEMAS
    # =============================================