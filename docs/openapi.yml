openapi: '3.0.2'
info:
  title: Infominer API
  version: '0.8'
servers:
  - url: http://infominer.ijs.si/api/v1/

tags:
  - name: Dataset
    description: "
      The API for creating, retrieving, and modifying datasets.
    "
  - name: Method
    description: "
      The API for executing, updating, and retrieving method records.
    "
  - name: Subset
    description: "
      The API for creating, updating, and retrieving subset records.
    "
  - name: Document
    description: "
      The API for retrieving, and updating documents records.
    "
  - name: DatasetModel
    x-displayName: The Dataset Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Dataset" />

  - name: SubsetModel
    x-displayName: The Subset Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Subset" />

  - name: MethodModel
    x-displayName: The Method Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Method" />

  - name: DocumentModel
    x-displayName: The Document Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Document" />

x-tagGroups:
  - name: General
    tags:
      - Dataset
      - Method
      - Subset
      - Document
  - name: Models
    tags:
      - DatasetModel
      - SubsetModel
      - MethodModel
      - DocumentModel

paths:

  # =============================================
  # DATASET ROUTES
  # =============================================

  /datasets:
    get:
      tags:
        - Dataset
      summary: "Get all datasets"
      description: "Gets all of the owner datasets."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasets:
                    type: array
                    items:
                      $ref: "components/schemas/dataset/Database.yml"
                    description: "The array of datasets."

    post:
      tags:
        - Dataset
      summary: "Upload a dataset file"
      description: "
        Uploads a dataset file (.csv) with with the following structure: \n

        - **Header.** The first line contains the names of the data columns.\n

        - **Rows.** The reminder of the lines contain the row values. \n

        Both the header and row values are separated by a delimiter. **Supported delimiters:**
        comma, semicolon, pipe, and tilde.
        "
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
                  description: "The dataset file."
              required:
              - file

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "components/schemas/upload/FileMetadata.yml"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

  /datasets/{datasetId}:
    parameters:
      - in: path
        name: datasetId
        schema:
          type: integer
          minimum: 1
        required: true
        description: "The dataset ID."
    post:
      tags:
        - Dataset
      summary: "Create a dataset"
      description: "Uploads the file metadata to create a new dataset."

      parameters:
        - in: path
          name: datasetId
          schema:
            type: integer
            minimum: 1
          required: true
          description: "
            The dataset ID provided by the [\"Upload a dataset file\"](#/paths/~1datasets/post)
            route.
          "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components/schemas/upload/FileUpload.yml"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasets:
                    type: object
                    description: "The dataset metadata."
                    properties:
                      id:
                        type: integer
                        minimum: 1
                        description: "
                          The dataset ID. Used to check the dataset status via the
                          [\"Check the dataset upload status\"](#/paths/~1datasets~1{datasetId}~1status/get)
                          route.
                        "
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"
    get:
      tags:
        - Dataset
      summary: "Get the dataset"
      description: "
        Gets the dataset metadata as well as all subset and methods metadata that are currently
        in the dataset analysis.
      "
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasets:
                    allOf:
                      - $ref: "#/components/schemas/Dataset"
                      - description: "The dataset metadata."
                  subsets:
                    type: array
                    minItems: 1
                    items:
                      $ref: "#/components/schemas/Subset"
                    description: "The array of subsets."
                  methods:
                    type: array
                    minItems: 1
                    items:
                      $ref: "#/components/schemas/Method"
                    description: "The array of methods."


        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"
    put:
      tags:
        - Dataset
      summary: "Update the dataset"
      description: "Updates the dataset metadata with the provided values."
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  datasets:
                    type: object
                    description: "The dataset metadata."
                    properties:
                      name:
                        type: string
                        nullable: true
                        example: "Not a Secret Dataset"
                        description: "The new dataset name."
                      description:
                        type: string
                        nullable: true
                        example: "This is certainly not a secret dataset."
                        description: "The new dataset description."
                required:
                - datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  datasets:
                    description: "The updated dataset metadata."
                    allOf:
                      - $ref: "#/components/schemas/Dataset"
                      - type: object
                        properties:
                          name:
                            example: "Not a Secret Dataset"
                          description:
                            example: "This is certainly not a secret dataset."


        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"
    delete:
      tags:
        - Dataset
      summary: "Delete the dataset"
      description: "
        Deletes the dataset and all of its associated analysis.
        **NOTE:** This cannot be reverted.
      "
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasets:
                    type: object
                    description: "The metadata of the deleted dataset."
                    properties:
                      id:
                        type: integer
                        nullable: false
                        minimum: 1
                        description: "The ID of the deleted dataset."
                      isDeleted:
                        type: boolean
                        description: "True, if the dataset was deleted. Otherwise, False."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

  /datasets/{datasetId}/status:
    parameters:
      - in: path
        name: datasetId
        schema:
          type: integer
          minimum: 1
        required: true
        description: "The dataset ID."
    get:
      tags:
        - Dataset
      summary: "Check the dataset upload status"
      description: "Checks and gets all of the dataset metadata, including its status."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasets:
                    allOf:
                      - description: "The dataset metadata."
                      - $ref: "components/schemas/dataset/Database.yml"

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"


  # =============================================
  # METHOD ROUTES
  # =============================================

  /datasets/{datasetId}/methods:
    parameters:
      - in: path
        name: datasetId
        schema:
          type: integer
          minimum: 1
        required: true
        description: "The dataset ID."
    get:
      tags:
        - Method
      summary: "Get all methods"
      description: "
        Get all metadata of the methods that were used in the analysis of the
        selected dataset.
      "
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  methods:
                    type: array
                    minItems: 1
                    nullable: false
                    items:
                      $ref: "#/components/schemas/Method"
                    description: "
                      The array of non-deleted methods used in the dataset analysis.
                    "
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

    post:
      tags:
        - Method
      summary: "Execute a method"
      description: "
        Sends the parameters and execute the method. Some methods require
        additional updates to finalize the methods training (e.g. active learning).
      "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components/schemas/methods/create/index.yml"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  methods:
                    allOf:
                    - type: object
                      description: "The method metadata."
                    - $ref: "#/components/schemas/MethodCreated"

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

  /datasets/{datasetId}/methods/{methodId}:
    parameters:
      - in: path
        name: datasetId
        schema:
          type: integer
          minimum: 1
        required: true
        description: "The dataset ID."
      - in: path
        name: methodId
        schema:
          type: integer
          minimum: 0
        required: true
        description: "The method ID."

    get:
      tags:
        - Method
      summary: "Get the method"
      description: "Gets the method and the associated subsets metadata."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  methods:
                    allOf:
                    - type: object
                      description: "The method metadata."
                    - $ref: "#/components/schemas/Method"
                  subsets:
                    type: array
                    minItems: 1
                    items:
                      $ref: "#/components/schemas/Subset"
                    description: "The subsets associated with the method."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

    put:
      tags:
        - Method
      summary: "Update the method"
      description: "
        Updates the method with new metadata and required to finalize the training process.
      "
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                methods:
                  allOf:
                  - type: object
                    description: "The method update metadata."
                  - $ref: "components/schemas/methods/update/index.yml"
              required:
                - methods
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  methods:
                    allOf:
                    - type: object
                      description: "The method metadata."
                    - $ref: "#/components/schemas/MethodUpdated"

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

    delete:
      tags:
        - Method
      summary: "Delete the method"
      description: "
        Deletes the method and any subsets it generated.
        **NOTE:** This cannot be reverted.
      "
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  methods:
                    type: object
                    description: "The metadata of the deleted method."
                    properties:
                      id:
                        type: integer
                        nullable: false
                        minimum: 0
                        description: "The ID of the deleted method."
                      isDeleted:
                        type: boolean
                        description: "True, if the method was deleted. Otherwise, False."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"


  # =============================================
  # SUBSET ROUTES
  # =============================================

  /datasets/{datasetId}/subsets:
    parameters:
      - in: path
        name: datasetId
        schema:
          type: integer
          minimum: 1
        required: true
        description: "The dataset ID."

    get:
      tags:
        - Subset
      summary: "Get all subsets"
      description: "
        Gets all subsets that were generated but not deleted during the dataset
        analysis.
      "
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  subsets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Subset"
                    description: "The array of subsets."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

    post:
      tags:
        - Subset
      summary: "Create a subset"
      description: "
        Creates a new subset using the provided metadata. **NOTE:** Not implemented yet.
      "
      deprecated: true
      parameters:
        - in: path
          name: datasetId
          schema:
            type: integer
            minimum: 1
          required: true
          description: "The dataset ID."
      responses:
        '500':
          description: Server Side Error
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/ServerError.yml"

  /datasets/{datasetId}/subsets/{subsetId}:
    parameters:
      - in: path
        name: datasetId
        schema:
          type: integer
          minimum: 1
        required: true
        description: "The dataset ID."
      - in: path
        name: subsetId
        schema:
          type: integer
          minimum: 0
        required: true
        description: "The subset ID."
    get:
      tags:
        - Subset
      summary: "Get a subset"
      description: "Gets the subset and its associated methods metadata."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  subsets:
                    allOf:
                    - description: "The subset metadata."
                    -  $ref: "#/components/schemas/Subset"
                  methods:
                    type: array
                    minItems: 1
                    items:
                      $ref: "#/components/schemas/Method"
                    description: "The methods associated with the subset."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

    put:
      tags:
        - Subset
      summary: "Update a subset"
      description: "Updates the subset with the provided metadata."
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  subsets:
                    type: object
                    description: "The subset metadata."
                    properties:
                      label:
                        type: string
                        nullable: true
                        example: "New Subset Label"
                        description: "The new subset label."
                      description:
                        type: string
                        nullable: true
                        example: "This is the new subset description."
                        description: "The new subset description."
                required:
                - subsets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  subsets:
                    type: object
                    description: "The updated subset metadata."
                    allOf:
                      - $ref: "#/components/schemas/Subset"
                      - type: object
                        properties:
                          label:
                            example: "New Subset Label"
                          description:
                            example: "This is the new subset description."

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

    delete:
      tags:
        - Subset
      summary: "Delete a subset"
      description: "
        Deletes the subset and the methods that used it.
        **NOTE:** This cannot be reverted.
      "
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  subsets:
                    type: object
                    description: "The metadata of the deleted subset."
                    properties:
                      id:
                        type: integer
                        nullable: false
                        minimum: 0
                        description: "The ID of the subset method."
                      isDeleted:
                        type: boolean
                        description: "True, if the subset was deleted. Otherwise, False."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

  /datasets/{datasetId}/subsets/{subsetId}/download:
    parameters:
        - in: path
          name: datasetId
          schema:
            type: integer
            minimum: 1
          required: true
          description: "The dataset ID."
        - in: path
          name: subsetId
          schema:
            type: integer
            minimum: 0
          required: true
          description: "The subset ID."
    get:
      tags:
        - Subset
      summary: "Download a subset"
      description: "
        Downloads a csv file containing the subset documents. The file can then be
        again uploaded via the [\"Upload a dataset file\"](#/paths/~1datasets/post)
        route.
      "
      responses:
        '200':
          description: OK
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                    description: "
                      The file containing the subset documents in a csv format. Can be
                      again uploaded via [\"Upload a dataset file\"](#/paths/~1datasets/post)
                      route.
                    "
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

  # =============================================
  # DOCUMENT ROUTES
  # =============================================

  /datasets/{datasetId}/documents:
    parameters:
        - in: path
          name: datasetId
          schema:
            type: integer
            minimum: 1
          required: true
          description: "The dataset ID."
    get:
      tags:
        - Document
      summary: "Get some documents"
      description: "
        Gets an array of documents that match the provided query criteria.
      "
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: "The number of documents to skip before starting to collect the result set."
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: "The numbers of documents to return."
        - in: query
          name: page
          schema:
            type: integer
            default: null
          description: "The page number of documents to return."
        - in: query
          name: subsetId
          schema:
            type: integer
            default: 0
          description: "
            The ID of the subset to query from. **Default:** query from the **\"root\"** subset,
            i.e. over all documents.
          "
        - in: query
          name: aggregates
          schema:
            type: boolean
            default: false
          description: "
            True, if the response should also contain the aggregate statistics of the retrieved
            documents. Otherwise, False.
          "
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    minItems: 0
                    items:
                      $ref: "#/components/schemas/Document"
                    description: "The array of retrieved documents."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

  /datasets/{datasetId}/documents/{documentId}:
    parameters:
        - in: path
          name: datasetId
          schema:
            type: integer
            minimum: 1
          required: true
          description: "The dataset ID."
        - in: path
          name: documentId
          schema:
            type: integer
            minimum: 0
          required: true
          description: "The document ID."
    get:
      tags:
        - Document
      summary: "Get a document"
      description: "Gets the selected document."
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    description: "The retrieved document."
                    $ref: "#/components/schemas/Document"
                  subsets:
                    type: array
                    minItems: 1
                    items:
                      $ref: "#/components/schemas/Subset"
                    description: "The array of subsets it belongs to."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/BadRequest.yml"

    put:
      tags:
        - Document
      summary: "Update a document"
      description: "
        Updates the document with the provided metadata. **NOTE:** Not implemented yet.
      "
      deprecated: true
      responses:
        '500':
          description: "Server Side Error"
          content:
            application/json:
              schema:
                $ref: "components/schemas/errors/ServerError.yml"


# =============================================
# COMPONENTS
# =============================================

components:
  schemas:

    Dataset:
      $ref: "components/schemas/Dataset.yml"

    Subset:
      $ref: "components/schemas/Subset.yml"

    Document:
      $ref: "components/schemas/Document.yml"


    # =============================================
    # METHOD SCHEMAS
    # =============================================

    Method:
      title: "method"
      type: object
      anyOf:
        - $ref: "components/schemas/methods/AggregateSubset.yml"
        - $ref: "components/schemas/methods/ActiveLearning.yml"
        - $ref: "components/schemas/methods/KMeans.yml"

    MethodCreated:
      title: "method"
      type: object
      anyOf:
        - $ref: "components/schemas/methods/ActiveLearning.yml"
        - $ref: "components/schemas/methods/KMeans.yml"

    MethodUpdated:
      title: "method"
      type: object
      anyOf:
        - $ref: "components/schemas/methods/ActiveLearning.yml"
